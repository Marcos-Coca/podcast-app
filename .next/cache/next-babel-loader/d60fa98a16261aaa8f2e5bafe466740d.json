{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Layout } from '../components/Layout';\nimport { SeriesLits } from '../components/SeriesList';\nimport { PodcastsList } from '../components/PodcastsList';\nimport { Banner } from '../components/Banner';\nimport Error from './_error';\nimport PodcastPlayer from '../components/PodcastPlayer';\n\nvar Channel = function Channel(_ref) {\n  _s();\n\n  var channel = _ref.channel,\n      _ref$audioClips = _ref.audioClips,\n      audioClips = _ref$audioClips === void 0 ? [] : _ref$audioClips,\n      _ref$series = _ref.series,\n      series = _ref$series === void 0 ? [] : _ref$series,\n      statusCode = _ref.statusCode;\n\n  var _useState = useState(null),\n      openPodcast = _useState[0],\n      setOpenPodcast = _useState[1];\n\n  function handleOpenPodcast(e, podcast) {\n    e.preventDefault();\n    setOpenPodcast(podcast);\n  }\n\n  function handleClosePodcast(e) {\n    e.preventDefault();\n    setOpenPodcast(null);\n  }\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      statusCode: statusCode\n    });\n  }\n\n  return __jsx(Layout, {\n    title: \"Channel \".concat(channel.title)\n  }, __jsx(Banner, {\n    image: channel.urls.banner_image.original\n  }), openPodcast && __jsx(PodcastPlayer, {\n    clip: openPodcast,\n    onClose: handleClosePodcast\n  }), __jsx(\"h1\", {\n    className: \"jsx-3402982447\"\n  }, channel.title), __jsx(\"h2\", {\n    className: \"jsx-3402982447\"\n  }, \"Series\"), __jsx(SeriesLits, {\n    series: series\n  }), __jsx(\"h2\", {\n    className: \"jsx-3402982447\"\n  }, \"Ultimos Podcasts\"), __jsx(PodcastsList, {\n    audioClips: audioClips,\n    handlePodcast: handleOpenPodcast\n  }), __jsx(_JSXStyle, {\n    id: \"3402982447\"\n  }, \"h1.jsx-3402982447{font-weight:600;padding:15px;}h2.jsx-3402982447{padding:5px;font-size:32px;font-weight:600;margin:0;text-align:center;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5pc3RyYWRvclxcRGVza3RvcFxccGxhdHppXFxuZXh0SlNcXHBhZ2VzXFxjaGFubmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThDd0IsQUFHcUMsQUFJSixZQUNHLElBSkYsV0FLRyxFQUpwQixjQUthLFNBQ1Msa0JBQ3RCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcQWRtaW5pc3RyYWRvclxcRGVza3RvcFxccGxhdHppXFxuZXh0SlNcXHBhZ2VzXFxjaGFubmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tICcuLi9jb21wb25lbnRzL0xheW91dCc7XHJcbmltcG9ydCB7IFNlcmllc0xpdHMgfSBmcm9tICcuLi9jb21wb25lbnRzL1Nlcmllc0xpc3QnO1xyXG5pbXBvcnQgeyBQb2RjYXN0c0xpc3QgfSBmcm9tICcuLi9jb21wb25lbnRzL1BvZGNhc3RzTGlzdCc7XHJcbmltcG9ydCB7IEJhbm5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvQmFubmVyJztcclxuaW1wb3J0IEVycm9yIGZyb20gJy4vX2Vycm9yJztcclxuaW1wb3J0IFBvZGNhc3RQbGF5ZXIgZnJvbSAnLi4vY29tcG9uZW50cy9Qb2RjYXN0UGxheWVyJztcclxuXHJcbmNvbnN0IENoYW5uZWwgPSAoeyBjaGFubmVsLCBhdWRpb0NsaXBzID0gW10sIHNlcmllcyA9IFtdLCBzdGF0dXNDb2RlIH0pID0+IHtcclxuICAgIGNvbnN0IFtvcGVuUG9kY2FzdCwgc2V0T3BlblBvZGNhc3RdID0gdXNlU3RhdGUobnVsbCk7XHJcblxyXG4gICAgZnVuY3Rpb24gaGFuZGxlT3BlblBvZGNhc3QoZSwgcG9kY2FzdCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBzZXRPcGVuUG9kY2FzdChwb2RjYXN0KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVDbG9zZVBvZGNhc3QoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBzZXRPcGVuUG9kY2FzdChudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDxFcnJvciBzdGF0dXNDb2RlPXtzdGF0dXNDb2RlfSAvPjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxMYXlvdXQgdGl0bGU9e2BDaGFubmVsICR7Y2hhbm5lbC50aXRsZX1gfT5cclxuICAgICAgICAgICAgPEJhbm5lciBpbWFnZT17Y2hhbm5lbC51cmxzLmJhbm5lcl9pbWFnZS5vcmlnaW5hbH0gLz5cclxuXHJcbiAgICAgICAgICAgIHtvcGVuUG9kY2FzdCAmJiAoXHJcbiAgICAgICAgICAgICAgICA8UG9kY2FzdFBsYXllclxyXG4gICAgICAgICAgICAgICAgICAgIGNsaXA9e29wZW5Qb2RjYXN0fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e2hhbmRsZUNsb3NlUG9kY2FzdH1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIDxoMT57Y2hhbm5lbC50aXRsZX08L2gxPlxyXG5cclxuICAgICAgICAgICAgPGgyPlNlcmllczwvaDI+XHJcbiAgICAgICAgICAgIDxTZXJpZXNMaXRzIHNlcmllcz17c2VyaWVzfSAvPlxyXG5cclxuICAgICAgICAgICAgPGgyPlVsdGltb3MgUG9kY2FzdHM8L2gyPlxyXG4gICAgICAgICAgICA8UG9kY2FzdHNMaXN0XHJcbiAgICAgICAgICAgICAgICBhdWRpb0NsaXBzPXthdWRpb0NsaXBzfVxyXG4gICAgICAgICAgICAgICAgaGFuZGxlUG9kY2FzdD17aGFuZGxlT3BlblBvZGNhc3R9XHJcbiAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgICAgICBoMSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaDIge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweDtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDMycHg7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgfTwvc3R5bGU+XHJcbiAgICAgICAgPC9MYXlvdXQ+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlclNpZGVQcm9wcyh7IHF1ZXJ5LCByZXMgfSkge1xyXG4gICAgY29uc3QgaWRDaGFubmVsID0gcXVlcnkuaWQ7XHJcbiAgICBjb25zb2xlLmxvZyhpZENoYW5uZWwpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBbcmVxQ2hhbm5lbCwgcmVxU2VyaWVzLCByZXFBdWRpb10gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfWApLFxyXG4gICAgICAgICAgICBmZXRjaChcclxuICAgICAgICAgICAgICAgIGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfS9jaGlsZF9jaGFubmVsc2BcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgZmV0Y2goXHJcbiAgICAgICAgICAgICAgICBgaHR0cHM6Ly9hcGkuYXVkaW9ib29tLmNvbS9jaGFubmVscy8ke2lkQ2hhbm5lbH0vYXVkaW9fY2xpcHNgXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIGlmIChyZXFDaGFubmVsLnN0YXR1cyA+PSA0MDApIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSByZXFDaGFubmVsLnN0YXR1cztcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBhdWRpb0NsaXBzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhQ2hhbmVsID0gYXdhaXQgcmVxQ2hhbm5lbC5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IGRhdGFDaGFuZWwuYm9keS5jaGFubmVsO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhQXVkaW8gPSBhd2FpdCByZXFBdWRpby5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgYXVkaW9DbGlwcyA9IGRhdGFBdWRpby5ib2R5LmF1ZGlvX2NsaXBzO1xyXG5cclxuICAgICAgICBsZXQgZGF0YVNlcmllcyA9IGF3YWl0IHJlcVNlcmllcy5qc29uKCk7XHJcbiAgICAgICAgbGV0IHNlcmllcyA9IGRhdGFTZXJpZXMuYm9keS5jaGFubmVscztcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgcHJvcHM6IHsgY2hhbm5lbCwgYXVkaW9DbGlwcywgc2VyaWVzLCBzdGF0dXNDb2RlOiAyMDAgfSB9O1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGNoYW5uZWw6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhdWRpb0NsaXBzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc2VyaWVzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAzLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENoYW5uZWw7XHJcbiJdfQ== */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\Administrador\\\\\\\\Desktop\\\\\\\\platzi\\\\\\\\nextJS\\\\\\\\pages\\\\\\\\channel.js */\"));\n};\n\n_s(Channel, \"pEhj3SwlPLKnCzInCkhwZ80CvFI=\");\n\n_c = Channel;\nexport var __N_SSP = true;\nexport default Channel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Channel\");","map":{"version":3,"sources":["C:/Users/Administrador/Desktop/platzi/nextJS/pages/channel.js"],"names":["React","useState","Layout","SeriesLits","PodcastsList","Banner","Error","PodcastPlayer","Channel","channel","audioClips","series","statusCode","openPodcast","setOpenPodcast","handleOpenPodcast","e","podcast","preventDefault","handleClosePodcast","title","urls","banner_image","original"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA2D;AAAA;;AAAA,MAAxDC,OAAwD,QAAxDA,OAAwD;AAAA,6BAA/CC,UAA+C;AAAA,MAA/CA,UAA+C,gCAAlC,EAAkC;AAAA,yBAA9BC,MAA8B;AAAA,MAA9BA,MAA8B,4BAArB,EAAqB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBACjCX,QAAQ,CAAC,IAAD,CADyB;AAAA,MAChEY,WADgE;AAAA,MACnDC,cADmD;;AAGvE,WAASC,iBAAT,CAA2BC,CAA3B,EAA8BC,OAA9B,EAAuC;AACnCD,IAAAA,CAAC,CAACE,cAAF;AACAJ,IAAAA,cAAc,CAACG,OAAD,CAAd;AACH;;AAED,WAASE,kBAAT,CAA4BH,CAA5B,EAA+B;AAC3BA,IAAAA,CAAC,CAACE,cAAF;AACAJ,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AAED,MAAIF,UAAU,KAAK,GAAnB,EAAwB;AACpB,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA;AAAnB,MAAP;AACH;;AAED,SACI,MAAC,MAAD;AAAQ,IAAA,KAAK,oBAAaH,OAAO,CAACW,KAArB;AAAb,KACI,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEX,OAAO,CAACY,IAAR,CAAaC,YAAb,CAA0BC;AAAzC,IADJ,EAGKV,WAAW,IACR,MAAC,aAAD;AACI,IAAA,IAAI,EAAEA,WADV;AAEI,IAAA,OAAO,EAAEM;AAFb,IAJR,EASI;AAAA;AAAA,KAAKV,OAAO,CAACW,KAAb,CATJ,EAWI;AAAA;AAAA,cAXJ,EAYI,MAAC,UAAD;AAAY,IAAA,MAAM,EAAET;AAApB,IAZJ,EAcI;AAAA;AAAA,wBAdJ,EAeI,MAAC,YAAD;AACI,IAAA,UAAU,EAAED,UADhB;AAEI,IAAA,aAAa,EAAEK;AAFnB,IAfJ;AAAA;AAAA,o0KADJ;AAoCH,CArDD;;GAAMP,O;;KAAAA,O;;AAsGN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Layout } from '../components/Layout';\r\nimport { SeriesLits } from '../components/SeriesList';\r\nimport { PodcastsList } from '../components/PodcastsList';\r\nimport { Banner } from '../components/Banner';\r\nimport Error from './_error';\r\nimport PodcastPlayer from '../components/PodcastPlayer';\r\n\r\nconst Channel = ({ channel, audioClips = [], series = [], statusCode }) => {\r\n    const [openPodcast, setOpenPodcast] = useState(null);\r\n\r\n    function handleOpenPodcast(e, podcast) {\r\n        e.preventDefault();\r\n        setOpenPodcast(podcast);\r\n    }\r\n\r\n    function handleClosePodcast(e) {\r\n        e.preventDefault();\r\n        setOpenPodcast(null);\r\n    }\r\n\r\n    if (statusCode !== 200) {\r\n        return <Error statusCode={statusCode} />;\r\n    }\r\n\r\n    return (\r\n        <Layout title={`Channel ${channel.title}`}>\r\n            <Banner image={channel.urls.banner_image.original} />\r\n\r\n            {openPodcast && (\r\n                <PodcastPlayer\r\n                    clip={openPodcast}\r\n                    onClose={handleClosePodcast}\r\n                />\r\n            )}\r\n            <h1>{channel.title}</h1>\r\n\r\n            <h2>Series</h2>\r\n            <SeriesLits series={series} />\r\n\r\n            <h2>Ultimos Podcasts</h2>\r\n            <PodcastsList\r\n                audioClips={audioClips}\r\n                handlePodcast={handleOpenPodcast}\r\n            />\r\n\r\n            <style jsx>{`\r\n                h1 {\r\n                    font-weight: 600;\r\n                    padding: 15px;\r\n                }\r\n                h2 {\r\n                    padding: 5px;\r\n                    font-size: 32px;\r\n                    font-weight: 600;\r\n                    margin: 0;\r\n                    text-align: center;\r\n                }\r\n            `}</style>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps({ query, res }) {\r\n    const idChannel = query.id;\r\n    console.log(idChannel);\r\n    try {\r\n        const [reqChannel, reqSeries, reqAudio] = await Promise.all([\r\n            fetch(`https://api.audioboom.com/channels/${idChannel}`),\r\n            fetch(\r\n                `https://api.audioboom.com/channels/${idChannel}/child_channels`\r\n            ),\r\n            fetch(\r\n                `https://api.audioboom.com/channels/${idChannel}/audio_clips`\r\n            ),\r\n        ]);\r\n\r\n        if (reqChannel.status >= 400) {\r\n            res.statusCode = reqChannel.status;\r\n            return {\r\n                props: {\r\n                    channel: null,\r\n                    audioClips: null,\r\n                    series: null,\r\n                    statusCode: 404,\r\n                },\r\n            };\r\n        }\r\n        const dataChanel = await reqChannel.json();\r\n        const channel = dataChanel.body.channel;\r\n\r\n        const dataAudio = await reqAudio.json();\r\n        const audioClips = dataAudio.body.audio_clips;\r\n\r\n        let dataSeries = await reqSeries.json();\r\n        let series = dataSeries.body.channels;\r\n\r\n        return { props: { channel, audioClips, series, statusCode: 200 } };\r\n    } catch (err) {\r\n        return {\r\n            props: {\r\n                channel: null,\r\n                audioClips: null,\r\n                series: null,\r\n                statusCode: 503,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\nexport default Channel;\r\n"]},"metadata":{},"sourceType":"module"}